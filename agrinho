let playerCar;
let obstacles = [];
let items = [];
let score = 0;
let level = 1;
let gameOver = false;
let gameStarted = false;

function setup() {
  createCanvas(600, 600);
  playerCar = new Car(width / 2, height - 80);
}

function draw() {
  background(255);

  if (!gameStarted) {
    textAlign(CENTER);
    textSize(36);
    fill(0);
    text("Pressione ENTER para começar", width / 2, height / 2);
  } else {
    // Game loop
    if (!gameOver) {
      // Desenha e controla o jogador
      playerCar.display();
      playerCar.move();

      // Cria novos obstáculos aleatoriamente
      if (frameCount % (60 - level * 5) === 0) {
        obstacles.push(new Obstacle());
      }

      // Cria novos itens aleatoriamente
      if (frameCount % (100 - level * 5) === 0) {
        items.push(new Item());
      }

      // Itera por todos os obstáculos
      for (let i = obstacles.length - 1; i >= 0; i--) {
        obstacles[i].display();
        obstacles[i].move();

        // Verifica colisão com o jogador
        if (obstacles[i].hits(playerCar)) {
          gameOver = true;
        }

        // Remove obstáculos que saem da tela
        if (obstacles[i].offscreen()) {
          obstacles.splice(i, 1);
          score++;
        }
      }

      // Itera por todos os itens
      for (let i = items.length - 1; i >= 0; i--) {
        items[i].display();
        items[i].move();

        // Verifica coleta de itens pelo jogador
        if (items[i].collect(playerCar)) {
          score += 10;
          items.splice(i, 1);
        }

        // Remove itens que saem da tela
        if (items[i].offscreen()) {
          items.splice(i, 1);
        }
      }

      // Mostra a pontuação e o nível
      textAlign(LEFT);
      textSize(20);
      fill(0);
      text("Score: " + score, 20, 30);
      text("Level: " + level, 20, 60);

      // Aumenta o nível a cada 500 pontos
      if (score % 500 === 0 && score !== 0) {
        level++;
      }

    } else {
      // Se o jogo acabou, mostra a mensagem de game over
      textAlign(CENTER);
      textSize(40);
      fill(255, 0, 0);
      text("Game Over", width / 2, height / 2);
      textSize(20);
      text("Final Score: " + score, width / 2, height / 2 + 30);
    }
  }
}

function keyPressed() {
  if (keyCode === ENTER) {
    gameStarted = true;
  }
  if (gameStarted && !gameOver) {
    if (keyCode === LEFT_ARROW && playerCar.x > 75) {
      playerCar.moveLeft();
    } else if (keyCode === RIGHT_ARROW && playerCar.x < width - 75) {
      playerCar.moveRight();
    }
  }
}

class Car {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.width = 40;
    this.height = 80;
    this.speed = 9;
  }

  display() {
    fill(0, 100, 200);
    rectMode(CENTER);
    rect(this.x, this.y, this.width, this.height);
  }

  moveLeft() {
    this.x -= this.speed;
  }

  moveRight() {
    this.x += this.speed;
  }

  move() {
    // Inclua aqui lógica adicional de movimento, se necessário
  }
}

class Obstacle {
  constructor() {
    this.x = random(50, width - 50);
    this.y = -20;
    this.width = random(30, 60);
    this.height = 20;
    this.speed = random(2, 5);
  }

  display() {
    fill(255, 0, 0);
    rectMode(CENTER);
    rect(this.x, this.y, this.width, this.height);
  }

  move() {
    this.y += this.speed;
  }

  offscreen() {
    return this.y > height;
  }

  hits(car) {
    return (
      this.y < car.y + car.height / 2 &&
      this.y + this.height > car.y - car.height / 2 &&
      this.x < car.x + car.width / 2 &&
      this.x + this.width > car.x - car.width / 2
    );
  }
}

class Item {
  constructor() {
    this.x = random(50, width - 50);
    this.y = -20;
    this.radius = 15;
    this.speed = random(2- 9 );
  }

  display() {
    fill(0, 255, 0);
    ellipse(this.x, this.y, this.radius * 2);
  }

  move() {
    this.y += this.speed;
  }

  offscreen() {
    return this.y > height;
  }

  collect(car) {
    let d = dist(this.x, this.y, car.x, car.y);
    return d < this.radius + car.width / 2;
  }
}
